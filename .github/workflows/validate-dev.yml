name: Validate DEV
# The GitHub Actions docs (https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on)
# describe other options for 'on', 'pull_request' is a good default.
on: 
  pull_request:
    branches:    
      - master
    paths:
      - 'dev/**'
jobs:
  tfsec:
    name: Run tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Check out modules
        uses: actions/checkout@v2
        with:
          repository: 'GoogleCloudPlatform/cloud-foundation-fabric'
          path: 'cloud-foundation-fabric'
          ref: 'v15.0.0'
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: 'gcp-networking'
      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ github.token }}
  terraform:
    name: Run terraform
    needs: tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Check out modules
        uses: actions/checkout@v2
        with:
          repository: 'GoogleCloudPlatform/cloud-foundation-fabric'
          path: 'cloud-foundation-fabric'
          ref: 'v15.0.0'
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: 'gcp-networking'
      - name: Install terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: 'gcp-networking/dev'
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: 'gcp-networking/dev'
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: 'gcp-networking/dev'
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        working-directory: 'gcp-networking/dev'
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        continue-on-error: true
      - uses: actions/github-script@v6
        # env:
        #   PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
            const planOutput = (steps.plan.outputs.stdout.length > 300) ? "Plan output is too large, check action log" : ${{ steps.plan.outputs.stdout }}

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Plan Output</summary>
            
            \`\`\`\n
            ${{ planOutput }}
            \`\`\`
            
            </details>`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
  infracost:
    name: Run infracost
    needs: terraform
    runs-on: ubuntu-latest # The following are JavaScript actions (not Docker)
    steps:
      - name: Check out modules
        uses: actions/checkout@v2
        with:
          repository: 'GoogleCloudPlatform/cloud-foundation-fabric'
          path: 'cloud-foundation-fabric'
          ref: 'v15.0.0'
      - name: Check out code
        uses: actions/checkout@v2
        with:
          path: 'gcp-networking'
      # Typically the Infracost actions will be used in conjunction with
      # https://github.com/hashicorp/setup-terraform. Subsequent steps
      # can run Terraform commands as they would in the shell.
      - name: Install terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false # This is recommended so the `terraform show` command outputs valid JSON
      - name: Terraform init
        run: terraform init
        working-directory: 'gcp-networking/dev'
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Terraform plan
        run: terraform plan -out tfplan.binary
        working-directory: 'gcp-networking/dev'
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      - name: Terraform show
        run: terraform show -json tfplan.binary > plan.json
        working-directory: 'gcp-networking/dev'
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      # Install the Infracost CLI, see https://github.com/infracost/actions/tree/master/setup
      # for other inputs such as version, and pricing-api-endpoint (for self-hosted users).
      - name: Setup Infracost
        uses: infracost/actions/setup@v1
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      # Generate Infracost JSON output, the following docs might be useful:
      # Multi-project/workspaces: https://www.infracost.io/docs/features/config_file
      # Combine Infracost JSON files: https://www.infracost.io/docs/features/cli_commands/#combined-output-formats
      - name: Generate Infracost JSON
        run: infracost breakdown --path plan.json --format json --out-file /tmp/infracost.json
        working-directory: 'gcp-networking/dev'
        # Env vars can be set using the usual GitHub Actions syntax
        # See the list of supported Infracost env vars here: https://www.infracost.io/docs/integrations/environment_variables/
        # env:
        #   MY_ENV: ${{ secrets.MY_ENV }}
      # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options.
      - name: Post Infracost comment
        run: |
          # Posts a comment to the PR using the 'update' behavior.
          # This creates a single comment and updates it. The "quietest" option.
          # The other valid behaviors are:
          #   delete-and-new - Delete previous comments and create a new one.
          #   hide-and-new - Minimize previous comments and create a new one.
          #   new - Create a new cost estimate comment on every push.
          infracost comment github --path /tmp/infracost.json \
                                   --repo $GITHUB_REPOSITORY \
                                   --github-token ${{github.token}} \
                                   --pull-request ${{github.event.pull_request.number}} \
                                   --behavior update